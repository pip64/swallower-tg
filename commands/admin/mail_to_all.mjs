import admins from "../../constants/admins.mjs";
import database from "../../database/index.mjs";

export default async function mailToAll(ctx) {
    if (ctx.chat.type === "private") {
        if (admins.includes(String(ctx.message.from.id))) {
            const text = ctx.message.text.split("/mail")[1];

            if (text) {
                const chats = await database("channels").catch(() => null);

                if (chats) {
                    const totalChats = chats.length;
                    await ctx.reply(`‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞.\n\n–ß–∞—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${totalChats}`);

                    let success = 0;
                    let failed = 0;
                    const BATCH_SIZE = 10;
                    
                    for (let i = 0; i < chats.length; i += BATCH_SIZE) {
                        const batch = chats.slice(i, i + BATCH_SIZE);
                        const batchPromises = batch.map(async (chat) => {
                            try {
                                await ctx.telegram.sendMessage(
                                    chat.channel_id, 
                                    `‚ö†Ô∏è *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞*\n\n${text.trim()}\n\n[–ö–∞–Ω–∞–ª –ó–∞–≥–ª—ã—Ç–∞](https://t.me/zaglit)`, 
                                    { parse_mode: 'Markdown' }
                                );
                                success++;
                                return true;
                            } catch (error) {
                                console.log(`Failed to send to ${chat.channel_id}:`, error);
                                failed++;
                                return false;
                            }
                        });

                        await Promise.all(batchPromises);
                        
                        if (i % 10 === 0) {
                            await ctx.reply(
                                `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏:\n` +
                                `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}\n` +
                                `‚ùå –û—à–∏–±–æ–∫: ${failed}\n` +
                                `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${totalChats - (success + failed)}`
                            ).catch(console.error);
                        }
                    }

                    await ctx.reply(
                        `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n` +
                        `üìä –ò—Ç–æ–≥–∏:\n` +
                        `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}\n` +
                        `‚ùå –û—à–∏–±–æ–∫: ${failed}\n` +
                        `üìù –í—Å–µ–≥–æ: ${totalChats}`
                    );
                } else {
                    await ctx.reply("–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ –ë–î üòÖ");
                }
            } else {
                await ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!");
            }
        }
    }
}