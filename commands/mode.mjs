import setBotMode from "../modules/chats/mode.mjs";
import isAdmin from "../modules/isAdmin.mjs";
import { modes } from "../constants/modes.mjs";
import isChatExists from "../modules/chats/isChatExists.mjs";
import getModeKeyboard from "../modules/inline/mode_keyboard.mjs";
import getMode from "../modules/modes/getMode.mjs";
import database from "../database/index.mjs";

const random = max => Math.floor(Math.random() * (max - 0) + 0)

Array.prototype.choice = function () {
    return this[random(this.length)];
}

const phrases = [
    "–ø—Ä–∏–≤–µ—Ç –±—Ä–æ, –∫–∞–∫ –¥–µ–ª–∞?",
    "–∫–∞–∫ –∂–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –Ω–∞ —É–ª–∏—Ü–µ!",
    "—Ç—Ä–æ–≥–∞—Ç—å —Ç—Ä–∞–≤—É –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ",
    "—è –∑–Ω–∞—é —Ç–≤–æ–π –∞–π–ø–∏ –∞–¥—Ä–µ—Å",
    "—Å—Ç–µ—Ç—Ö–µ–º –∑–¥–∞—Ä–æ–≤–∞"
]

export default async function Mode(ctx) {
    try {
        if (['group', 'supergroup'].includes(ctx.chat.type)) {
            isAdmin(ctx.message.chat.id, ctx.message.from.id, ctx).then(async (result) => {
                try {
                    if (result) {
                        const [isExists, chat] = await isChatExists(ctx.message.chat.id);

                        const otherMode = ctx.message.text.split("/mode")[1].trim();

                        if (otherMode.length > 0) {
                            const mode = await getMode(Number(otherMode));

                            if (!mode) return await ctx.reply("‚ùå –¢–∞–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");

                            const changeMode = await setBotMode(ctx.message.chat.id, otherMode);

                            if (!changeMode) return await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º.")
                            
                            await ctx.reply(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º "${mode?.name}".\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ /mode.`);
                        } else {
                            ctx.replyWithMarkdown(`–ó–∞–≥–ª—ã—Ç –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥ —Ä–µ–∂–∏–º—ã.\n\n–ü—Ä–∏–º–µ—Ä: \`${await modes[Object.keys(modes).choice()](phrases.choice())}\`\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:`, {
                                reply_markup: {
                                    inline_keyboard: getModeKeyboard(chat.mode)
                                }
                            });
                        }
                    } else {
                        await ctx.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
                    }
                } catch (error) {
                    console.log(error);
                }
            }).catch(async (error) => {
                console.log(error);
                await ctx.reply("–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòÖ")
            })
        }
    } catch (error) {
        console.log(error);
    }
}