import isAdmin from "../modules/isAdmin.mjs";
import isChatExists from "../modules/chats/isChatExists.mjs";
import * as fs from 'node:fs/promises';
import { constants } from 'node:fs/promises';

export default async function informationChat(ctx) {
    try {
        if (['group', 'supergroup'].includes(ctx.chat.type)) {
            const adminCheck = await isAdmin(ctx.message.chat.id, ctx.message.from.id, ctx);
            
            if (!adminCheck) {
                await ctx.reply('‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
                return;
            }

            const [isExists, chat] = await isChatExists(ctx.message.chat.id);

            if (isExists) {
                const dbChatMessagesExists = await fs.access(`./database/messages/${ctx.message.chat.id}.txt`, constants.R_OK | constants.W_OK).then(() => true).catch(() => false)
                
                if (dbChatMessagesExists) {
                    await ctx.reply('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–∞—Ç–∞...');
                    await ctx.replyWithDocument({
                        source: `./database/messages/${ctx.message.chat.id}.txt`,
                        filename: `chat_${ctx.message.chat.id}.txt`
                    }, {
                        caption: `üì• –§–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–∞—Ç–∞ ${ctx.chat.title || ctx.chat.id}`
                    });
                } else {
                    await ctx.reply(`–§–∞–π–ª —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                }
            } else {
                await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`)
            }
        }
    } catch (error) {
        console.log(error);
    }
}